
Verisk & CreditSafe account 
React Doubt clarification/mentor connect call. 

MENTOR CONNECT SESSION-  REACT MODULE-[201-INTERMEDIATE]- CTHWD304505

---

Background:
---
  Raghavendra 
  --  
    2-3 years of exp 
    not functional comp exp 
    need to know hooks & custom hook 
    need to know JEST & RTL 
    need to know redux-toolkit 

  Balaji 
  --
    3 yrs into React. 5 projects 
    need to know class comp
    need to know custom hook 
    need to know advanced JEST & RTL
    not sure about react tech stack of upcoming project 

  Muthukumarasamy 
  --
    overall react js exp: 6 years
    working on React + TS now
    need to know JEST & RTL
    haven't worked on redux-saga
    need to know redux-toolkit 

---
React JS 
---
  * Fn comp (4 hours)
    * hooks 
      useState, useEffect, useReducer, useRef, [DONE]
      custom hooks [TODO]
      useCallback (TODO)
      useMemo (TODO)
      useContext (TODO)
    
  * class comp (1.5 hour)
    * lifecycle hooks [done]
    error boundary [done]

  * unit testing 
    * JEST & RTL (10 hours)
      * JSX 
      * prop 
      * state 
      * events 
      * snapshot 
      * mocking positive
      * mocking negative 
      * spy 

      code coverage 
  

  * redux-toolkit (3 hours)

-----

approach
--
  Hands-on 
  --
  explain => coding => demo => (try out) => (Todos)

  project-based 
  ----

// Fn components
  1. Fn Comp with Named Fn [DONE]
  2. Fn Comp with Anonymous Fn [DONE]
  3. Fn Comp with Arrow Fn 

  * were called as dumb / presentational / stateless components before v16.8 of React 
  * after v16.8 of React, no longer stateless 
  * hooks facilitate loads of missed features 
  * have state and other React features without writing a class component.

// Class Components 
  * called as containers, stateful, smart components 

  


---

---
Calc
--
  Development 
  --
    Sources: FRD, HLD, Designs
    
    Prepare Test Cases for Add Feature
    ==================
      1. input should be of numbers
      2. output should be of number as well
      3. if other than numbers entered add button should be disabled 

    Add Feature
    ---
      function add(a, b) {
        if(typeof a === 'number' && typeof b === 'number'){
          return a + b;
        }
      }
      add(10, 20); // 30

    To Test use Tools
    ----
      * to test our functional code against the identified test cases 
      * if bugs the tools will throw error immediately
      * if success the tools will give a green signal

===
Modern Software Dev approach
---
  devs write test cases => devs write fn code => (Tools) => SUCCESS / FAILURE 
-------

Automated Testing 
---
  0. Static Type Checking 
      * checking the data type of a variable, fn, argument, return types
      Tools: TypeScript / Flow JS / PropTypes 

  1. Unit Testing (To learn)
      * testing small unit of a comp 
      * testing independent unit of a comp 
      * testing in isolation 
      Tools: JEST (Framework and also a Test Runner) + React Testing Library
                  or 
             JEST + Enzyme 

  2. Integration Testing 
      * Testing modules together (with rest api calls)

      Tools: JEST (Framework and also a Test Runner) + React Testing Library
                or 
             JEST + Enzyme 

  3. End to End (E2E) Testing 
      * Testing the whole app.
      * mostly carried out by QA Team 

      Tools: CypressJS, Selenium, Protractor, Cucumber, playwright, Puppeteer


---
2 Approaches / 2 Testing Methodologies (modern)
---
  1. Test Driven Development  (TDD) [To learn]
      * write NEW CODE only if automated test fails 

      Dev writes test cases => (failure) => Dev writes fn code  => (success) => [CODE COMPLETE]
      
      Testing Pattern: AAA (Arrange, Act, Assert)
      Tools: JEST

  2. Behavior Driven Development (BDD)
      * is an agile s/w dev Methodology 
      * app is documented, designed around the behaviour the end user 
        wants to experience when they interact with with it

      Dev writes test cases around the Behavior we want to see => ( failure ) => Dev writes fn code  => (success) => [CODE COMPLETE]
      
      Testing Pattern: Given, When, Then 
      Tools: Jasmine JS

2 Testing Patterns 
---
  1. AAA (Arrange, Act, Assert)
  2. Given, When, Then 

3 Tools
---
  1. JEST (Testing Framework and a Test Runner)
  2. React Testing Library (RTL) - Testing utility for DOM Querying
  3. EnzymeJs - Testing utility for DOM Querying (similar to jQuery)
      * supports officially till React v16
      * also works unofficially in React v17
      * no official or unofficial support for React v18. 

---------



  


  





  

 
